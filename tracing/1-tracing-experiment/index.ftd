-- ds.page: Tracing Logging

As a web developer we have to deal with errors, warnings, events that are
occurring in software system.

-- ds.h1: Why To Log

Imagine that you have 50K users on your website and everything is working fine,
suddenly your working code start breaking. It was well tested but it is start
breaking. So that means software can't be perfect, they can break.

So, how do know what happened? If you had placed some more code in your
application to do errors and logging, you would have easily referred to that
data, and figured out what message was recorded before stop the application.

In Rust, there is log library to do this job, check the below example this is
how we can do the logging.

-- ds.code:
lang: rs

use log::{ info, warn, error, debug, };

debug!("Something weird occured: {}", someDebugVariable);
error!("{}", "And error occured");
info!("{:?}", "Take note");
warn!("{:#?}", "This is important");

-- ds.code:
lang: sh

RUST_LOG=info cargo run

-- ds.code: Example
lang: rs

use log::{ info, error, debug, warn };
fn main() {
    // Initialize the env_logger before using the logs macro
    env_logger::init();
    error!("{}", "And error occured");
    warn!("{:#?}", "This is important");
    info!("{:?}", "Take note");
    debug!("Something weird occured: {}", "Error");
}


-- ds.h1: `log`

A lightweight logging facade.

The log crate provides a single logging API that abstracts over the actual
logging implementation.

A log request consists of a target, a level, and a body. A target is a string
which defaults to the module path of the location of the log request, though
that default may be overridden. Logger implementations typically use the target
to filter requests based on some user configuration.

-- ds.h2: `Usage`

The basic use of the log crate is through the five logging macros: error!,
warn!, info!, debug! and trace! where error! represents the highest-priority
log messages and trace! the lowest. The log messages are filtered by configuring
the log level to exclude messages with a lower priority. Each of these macros
accept format strings similarly to println!.



-- ds.h1: `env_logger`

simple logger that can be configured via environment variables, for use with
the logging facade exposed by the log crate.

[More...](https://docs.rs/env_logger/latest/env_logger/)
[Example](https://github.com/rust-cli/env_logger/tree/main/examples)

-- ds.h1: `log4rs`

[Docs](https://docs.rs/log4rs/1.2.0/log4rs/)


-- ds.h1: Tracing in Rust

In software engineering, tracing involves a specialized use of logging to record
information about the program execution. - Wiki

Tracing involves monitoring your code from starting to finish during the
execution process. So if you are designing the large application where too many
things could go wrong and debugging could be a pain; tracing gives a you
systematic overview of the activities in your code.

So Rust tracing library leverages tracing and provides devs with a full scale
framework that allow you collect structured, event-based diagnostic information
from your Rust program.

Code tracing involves three different stages:

- Instrumentation: This is where you add tracing code to your source code
application.

- Actual Tracing: at this point during execution, the activities written to the
target platform for analysis.

- Analysis: the stage where you analyze and evaluate the information your
tracing system has gathered to find and understand problem in the application.
This is also allows where you can plug in tools like LogRocket, Sentry, or Grafana
to allow you to visualize your entire system workflow, performance, errors, and
things you could improve.

There are several libraries to work with tracing. Find in the tracing [docs](https://crates.io/crates/tracing).


-- ds.h1: `tracing` explained

-- ds.h2: Core Concepts

The core of tracing’s API is composed of spans, events and subscribers. We’ll
cover these in turn.

-- ds.h2: Spans

To record the flow of execution through a program, tracing introduces the
concept of spans. Unlike a log line that represents a moment in time, a span
represents a period of time with a beginning and an end. When a program begins
executing in a context or performing a unit of work, it enters that context’s
span, and when it stops executing in that context, it exits the span. The span
in which a thread is currently executing is referred to as that thread’s current
span.


-- ds.code:
lang: rs

use tracing::{span, Level};
let span = span!(Level::TRACE, "my_span");
// `enter` returns a RAII guard which, when dropped, exits the span. this
// indicates that we are in the span for the current lexical scope.
let _enter = span.enter();
// perform some work in the context of `my_span`...

-- ds.h2: Events

An Event represents a moment in time. It signifies something that happened
while a trace was being recorded. Events are comparable to the log records
emitted by unstructured logging code, but unlike a typical log line, an Event
may occur within the context of a span.

-- ds.code:
lang: rs

use tracing::{event, span, Level};

// records an event outside of any span context:
event!(Level::INFO, "something happened");

let span = span!(Level::INFO, "my_span");
let _guard = span.enter();

// records an event within "my_span".
event!(Level::DEBUG, "something happened inside my_span");

-- ds.h2: Subscribers

As Spans and Events occur, they are recorded or aggregated by implementations of
the Subscriber trait. Subscribers are notified when an Event takes place and
when a Span is entered or exited. These notifications are represented by the
following Subscriber trait methods:

- `event`, called when an Event takes place,
- `enter`, called when execution enters a Span,
- `exit`, called when execution exits a Span


In addition, subscribers may implement the `enabled` function to filter the
notifications they receive based on metadata describing each Span or Event. If a
call to Subscriber::enabled returns false for a given set of metadata, that
Subscriber will not be notified about the corresponding Span or Event. For
performance reasons, if no currently active subscribers express interest in a
given set of metadata by returning true, then the corresponding Span or Event
will never be constructed.

-- ds.h2: Usage

-- ds.h3: Span

The span! macro expands to a Span struct which is used to record a span.
The Span::enter method on that struct records that the span has been entered,
and returns a RAII guard object, which will exit the span when dropped.

For example:

-- ds.code:
lang: rs

use tracing::{span, Level};
// Construct a new span named "my span" with trace log level.
let span = span!(Level::TRACE, "my span");

// Enter the span, returning a guard object.
let _enter = span.enter();

// Any trace events that occur before the guard is dropped will occur
// within the span.

// Dropping the guard will exit the span.


-- ds.markdown:

The `instrument` attribute provides an easy way to add tracing spans to
functions. A function annotated with `instrument` will create and enter a span
with that function’s name every time the function is called, with arguments to
that function will be recorded as fields using fmt::Debug.

-- ds.code:
lang: rs

use tracing::{Level, event, instrument};

#[instrument]
pub fn my_function(my_arg: usize) {
    // This event will be recorded inside a span named `my_function` with the
    // field `my_arg`.
    event!(Level::INFO, "inside my_function!");
    // ...
}

-- ds.h1: Reference


- [Article](https://blog.logrocket.com/comparing-logging-tracing-rust/)
- [Rust Log Trait](https://crates.io/crates/log)
- [Rust Tracing Trait](https://crates.io/crates/tracing)
- [Open Telemetry](https://crates.io/crates/opentelemetry)


-- ds.h1: `tracing` Experiment


Code: /src/main.rs

-- ds.h2: `tracing::instrument`

- `tracing_expr: new`: when span is creating
- `tracing_expr: enter`: entering into a span
- `index{params}:foo:foo1`: logs trace for path
- `tracing_expr: close`: closing the span, giving `time.busy` and `time.idle`


-- ds.h3: `instrument` Span Attributes

- for span name: #[instrument(name = "my_span")]
- override target: #[instrument(target = "my_crate::some_special_target")]
- level: #[instrument(level = "trace")]


-- ds.code: Code Example
lang: rs

#[instrument(
    name = "index_rename",
    target = "my_crate::some_special_target",
    level = "trace"
)]
async fn index(item: web::Json<MyObj>) -> HttpResponse {
    event!(Level::TRACE, "inside index function!");
    event!(Level::INFO, "inside index function!");
    // println!("model: {:?}", &item);
    event!(Level::INFO, "calling function foo!");
    foo().await;
    HttpResponse::Ok().json(item.0) // <- send response
}



-- ds.code: Output
lang: sh

cargo run

curl --header "Content-type: application/json" -d '{"name": "Abrar", "number": 1}' "http://127.0.0.1:8000/"


INFO tracing_expr: inside index function!
INFO tracing_expr: calling function foo!
INFO i-am-foo: tracing_expr: new
INFO i-am-foo: tracing_expr: enter
INFO i-am-foo: tracing_expr: inside foo function!
INFO i-am-foo: tracing_expr: calling foo1 function!
INFO i-am-foo:i-am-foo1: tracing_expr: new
INFO i-am-foo:i-am-foo1: tracing_expr: enter
INFO i-am-foo:i-am-foo1: tracing_expr: inside foo1 function!
INFO i-am-foo:i-am-foo1: tracing_expr: foo1 function! ends
INFO i-am-foo:i-am-foo1: tracing_expr: exit
INFO i-am-foo:i-am-foo1: tracing_expr: close time.busy=5.01s time.idle=149µs
INFO i-am-foo: tracing_expr: foo function! ends
INFO i-am-foo: tracing_expr: exit
INFO i-am-foo: tracing_expr: close time.busy=10.0s time.idle=93.9µs



-- ds.h3: `instrument` Skipping Fields

- multiple args can be passed to skip
- args passed to skip do not need to implement fmt::Debug
- use `skip_all` for skipping all

-- ds.code: Examples
lang: rs

// This type doesn't implement `fmt::Debug`!
struct NonDebug;
#[instrument(skip(non_debug))]
fn my_function(arg: usize, non_debug: NonDebug) {
    // ...
}


// These arguments are huge
#[instrument(skip_all)]
fn my_big_data_function(large: Vec<u8>, also_large: HashMap<String, String>) {
    // ...
}


// skip trait self
impl MyType {
    // Suppose we don't want to print an entire kilobyte of `data`
    // every time this is called...
    #[instrument(skip(self))]
    pub fn my_method(&mut self, an_interesting_argument: usize) {
         // ... do something (hopefully, using all that `data`!)
    }
}


-- ds.code: Code Example
lang: rs

#[instrument]
async fn foo1() {
    event!(Level::INFO, "inside foo1 function!");
    std::thread::sleep(std::time::Duration::from_secs(5));
    event!(Level::INFO, "foo1 function! ends");
}

#[instrument]
async fn foo() {
    event!(Level::INFO, "inside foo function!");
    event!(Level::INFO, "calling foo1 function!");
    foo1().await;
    std::thread::sleep(std::time::Duration::from_secs(5));
    event!(Level::INFO, "foo function! ends");
}

/// This handler uses json extractor
#[instrument]
async fn index(item: web::Json<MyObj>) -> HttpResponse {
    event!(Level::INFO, "inside index function!");
    // println!("model: {:?}", &item);
    event!(Level::INFO, "calling function foo!");
    foo().await;
    HttpResponse::Ok().json(item.0) // <- send response
}


-- ds.code: Output
lang: sh

curl --header "Content-type: application/json" -d '{"name": "Abrar", "number": 1}' "http://127.0.0.1:8000/"

-- ds.code:
lang: sh

INFO index: tracing_expr: new
INFO index: tracing_expr: enter
INFO index: tracing_expr: inside index function!
INFO index: tracing_expr: calling function foo!
INFO index:i-am-foo: tracing_expr: new
INFO index:i-am-foo: tracing_expr: enter
INFO index:i-am-foo: tracing_expr: inside foo function!
INFO index:i-am-foo: tracing_expr: calling foo1 function!
INFO index:i-am-foo:i-am-foo1: tracing_expr: new
INFO index:i-am-foo:i-am-foo1: tracing_expr: enter
INFO index:i-am-foo:i-am-foo1: tracing_expr: inside foo1 function!
INFO index:i-am-foo:i-am-foo1: tracing_expr: foo1 function! ends
INFO index:i-am-foo:i-am-foo1: tracing_expr: exit
INFO index:i-am-foo:i-am-foo1: tracing_expr: close time.busy=5.01s time.idle=172µs
INFO index:i-am-foo: tracing_expr: foo function! ends
INFO index:i-am-foo: tracing_expr: exit
INFO index:i-am-foo: tracing_expr: close time.busy=10.0s time.idle=104µs
INFO index: tracing_expr: exit
INFO index: tracing_expr: close time.busy=10.0s time.idle=113µs


-- ds.h3: `instrument` Adding Fields

Additional fields (key-value pairs with arbitrary data) may be added to the
generated span using the `fields` argument.

Any Rust expression can be used as a field value in this manner.

These expressions will be evaluated at the beginning of the function’s body.


-- ds.code: Examples
lang: rs

// This will record a field named "i" with the value of `i` *and* a field
// named "next" with the value of `i` + 1.
#[instrument(fields(next = i + 1))]
pub fn my_function(i: usize) {
    // ...
}

// This will record the request's URI and HTTP method as their own separate
// fields.
#[instrument(fields(http.uri = req.uri(), http.method = req.method()))]
pub fn handle_request<B>(req: http::Request<B>) -> http::Response<B> {
    // ... handle the request ...
}


impl MyType {
    // This will skip the `data` field, but will include `self.name`,
    // formatted using `fmt::Display`.
    #[instrument(skip(self), fields(self.name = %self.name))]
    pub fn my_method(&mut self, an_interesting_argument: usize) {
         // ... do something (hopefully, using all that `data`!)
    }
}

// This function does a very interesting and important mathematical calculation.
// Suppose we want to record both the inputs to the calculation *and* its result...
#[instrument(fields(result))]
pub fn do_calculation(input_1: usize, input_2: usize) -> usize {
    // Rerform the calculation.
    let result = input_1 + input_2;

    // Record the result as part of the current span.
    tracing::Span::current().record("result", &result);

    // Now, the result will also be included on this event!
    tracing::info!("calculation complete!");

    // ... etc ...
}

-- ds.code: Code Example
lang: rs

/// This handler uses json extractor
#[instrument(
  skip(item, _req),
  fields(
    http.path = _req.uri().path(),
    http.method = _req.method().as_str(),
    result
  )
)]
async fn index(_req: actix_web::HttpRequest, item: web::Json<MyObj>) -> HttpResponse {
    event!(Level::INFO, "inside index function!");
    let result = 4 + 5;
    // Record the result as part of the current span.
    tracing::Span::current().record("result", &result);

    // println!("model: {:?}", &item);
    // event!(Level::INFO, "calling function foo!");
    // foo(&item, "param1", "param2").await;
    HttpResponse::Ok().json(item.0) // <- send response
}


-- ds.code: Console Output
lang: sh

INFO actix_server::builder: Starting 8 workers
INFO actix_server::server: Actix runtime found; starting in Actix runtime
INFO index{http.path="/" http.method="POST"}: tracing_expr: new
INFO index{http.path="/" http.method="POST"}: tracing_expr: enter
INFO index{http.path="/" http.method="POST"}: tracing_expr: inside index function!
INFO index{http.path="/" http.method="POST" result=9}: tracing_expr: exit
INFO index{http.path="/" http.method="POST" result=9}: tracing_expr: close time.busy=87.3µs time.idle=66.8µs

-- ds.h3: `instrument` Remaining Options

-- ds.h3: `ret`

Adding the `ret` argument to #[instrument] will emit an event with the
function’s return value when the function returns:

-- ds.code:
lang: rs

#[instrument(ret)]
fn my_function() -> i32 {
    42
}

#[instrument(ret(Display))]
fn my_function() -> i32 {
    42
}

-- ds.h3: `err`

If the function returns a Result<T, E> and E implements std::fmt::Display,
you can add err or err(Display) to emit error events when the function returns
Err:

-- ds.code:
lang: rs

#[instrument(err)]
fn my_function(arg: usize) -> Result<(), std::io::Error> {
    Ok(())
}


#[instrument(err, ret)]
fn my_function(arg: usize) -> Result<(), std::io::Error> {
    Ok(())
}

-- ds.code: Usage
lang: rs

/// This handler uses json extractor
#[instrument(
  skip(item, _req),
  ret
)]
async fn index(_req: actix_web::HttpRequest, item: web::Json<MyObj>) -> HttpResponse {
    event!(Level::INFO, "inside index function!");
    let result = 4 + 5;
    // Record the result as part of the current span.
    tracing::Span::current().record("result", &result);

    // println!("model: {:?}", &item);
    // event!(Level::INFO, "calling function foo!");
    // foo(&item, "param1", "param2").await;
    HttpResponse::Ok().json(item.0) // <- send response
}

-- ds.code: Output
lang: ftd

2022-12-27T13:36:08.181063Z  INFO index: tracing_expr: new
2022-12-27T13:36:08.181110Z  INFO index: tracing_expr: enter
2022-12-27T13:36:08.181130Z  INFO index: tracing_expr: inside index function!
2022-12-27T13:36:08.181197Z  INFO index: tracing_expr: return=HttpResponse { error: None, res:
Response HTTP/1.1 200 OK
  headers:
    "content-type": "application/json"
  body: Sized(27)
 }
2022-12-27T13:36:08.181237Z  INFO index: tracing_expr: exit
2022-12-27T13:36:08.181272Z  INFO index: tracing_expr: close time.busy=127µs time.idle=90.8µs


-- ds.h2: Subscribers

In order to record trace events, executables have to use a Subscriber
implementation compatible with tracing. A Subscriber implements a way of
collecting trace data, such as by logging it to standard output.

A subscriber is responsible for the following:

- Registering new spans as they are created, and providing them with span IDs.
Implicitly, this means the subscriber may determine the strategy for determining
span equality.
- Recording the attachment of field values and follows-from
annotations to spans. Filtering spans and events, and determining when those
filters must be invalidated.
- Observing spans as they are entered, exited, and
closed, and events as they occur.

[More...](https://docs.rs/tracing/latest/tracing/trait.Subscriber.html)

-- ds.code: fmt subscriber
lang: rs

#[instrument(skip(item, _req), ret)]
async fn index(_req: actix_web::HttpRequest, item: web::Json<MyObj>) -> HttpResponse {
    event!(Level::INFO, "inside index function!");
    event!(Level::INFO, "calling function foo!");
    foo(&item, "param1", "param2").await;
    HttpResponse::Ok().json(item.0) // <- send response
}


#[actix_web::main]
async fn main() -> std::io::Result<()> {
    let subscriber = tracing_subscriber::FmtSubscriber::builder()
        // all spans/events with a level higher than TRACE (e.g, debug, info, warn, etc.)
        // will be written to stdout.
        .with_max_level(Level::INFO)
        .with_level(false)
        .event_format(tracing_subscriber::fmt::format().compact())
        .with_span_events(tracing_subscriber::fmt::format::FmtSpan::ACTIVE)
        .with_span_events(tracing_subscriber::fmt::format::FmtSpan::CLOSE)
        // completes the builder.
        .finish();

    tracing::subscriber::set_global_default(subscriber).expect("setting default subscriber failed");

    HttpServer::new(|| {
        App::new()
            .app_data(web::JsonConfig::default().limit(4096)) // <- limit size of the payload (global configuration)
            .service(web::resource("/m").route(web::post().to(index_manual)))
            .service(web::resource("/").route(web::post().to(index)))
    })
    .bind(("127.0.0.1", 8000))?
    .run()
    .await
}

-- ds.code: Log Output
lang: sh


2022-12-27T14:31:40.749687Z  INFO actix_server::builder: Starting 8 workers
2022-12-27T14:31:40.749827Z  INFO actix_server::server: Actix runtime found; starting in Actix runtime
2022-12-27T14:31:41.579778Z  INFO index: tracing_expr: inside index function!
2022-12-27T14:31:41.579833Z  INFO index: tracing_expr: calling function foo!
2022-12-27T14:31:41.579869Z  INFO index:i-am-foo: tracing_expr: msg="inside foo function!" param1="param1"
2022-12-27T14:31:41.579906Z  INFO index:i-am-foo: tracing_expr: calling foo1 function!
2022-12-27T14:31:41.579940Z  INFO index:i-am-foo:i-am-foo1: tracing_expr: inside foo1 function!
2022-12-27T14:31:46.585007Z  INFO index:i-am-foo:i-am-foo1: tracing_expr: foo1 function! ends
2022-12-27T14:31:46.585486Z  INFO index:i-am-foo:i-am-foo1: tracing_expr: close time.busy=5.01s time.idle=67.6µs
2022-12-27T14:31:51.590625Z  INFO index:i-am-foo: tracing_expr: foo function! ends
2022-12-27T14:31:51.590755Z  INFO index:i-am-foo: tracing_expr: close time.busy=10.0s time.idle=9.04µs
2022-12-27T14:31:51.590978Z  INFO index: tracing_expr: return=HttpResponse { error: None, res:
Response HTTP/1.1 200 OK
  headers:
    "content-type": "application/json"
  body: Sized(27)
 }
2022-12-27T14:31:51.591043Z  INFO index: tracing_expr: close time.busy=10.0s time.idle=12.0µs